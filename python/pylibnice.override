/* -*- Mode: C; ; c-file-style: "python" -*- */

%%
headers
#include <Python.h>
#include "pygobject.h"
#include "agent.h"
#include "../agent/agent-enumtypes.h"
#include <glib.h>

%%
modulename libnice
%%
import gobject.GObject as PyGObject_Type
import glib.MainContext as PyGMainContext_Type
%%
ignore-glob
  *_get_type
ignore nice_candidate_pair_priority
ignore nice_candidate_ice_priority
ignore nice_candidate_ice_priority_full
ignore nice_candidate_msn_priority
ignore nice_candidate_jingle_priority
ignore nice_agent_attach_recv
ignore nice_agent_new_reliable
%%
override nice_agent_new kwargs
static int
_wrap_nice_agent_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject* maincontext;
	PyObject* compatibility_obj;
	PyObject* turncompatibility_obj;
	gint compatibility;
	gint turn_compatibility;

	(void)kwargs;

	if (! PyArg_ParseTuple( args, "O!OO", &PyGMainContext_Type, &maincontext, &compatibility_obj, &turncompatibility_obj))
        return -1;

	if (pyg_enum_get_value(NICE_TYPE_COMPATIBILITY, compatibility_obj, &compatibility))
	    return -1;

	if (pyg_enum_get_value(NICE_TYPE_COMPATIBILITY, turncompatibility_obj, &turn_compatibility))
	    return -1;

	self->obj = (GObject *)nice_agent_new(pyg_boxed_get(maincontext, GMainContext), compatibility, turn_compatibility);
    return 0;
}
%%
override-slot NiceCandidate.tp_getattr
static PyObject *
_wrap_nice_candidate_tp_getattr(PyObject *self, char *attr)
{
  NiceCandidate *candidate;

  candidate = pyg_boxed_get(self, NiceCandidate);

#define CHECK_NULL(x) ((x) == NULL ? "" : (x))

  if (!strcmp (attr, "foundation"))
    return PyString_FromString (CHECK_NULL(candidate->foundation));
  else if (!strcmp (attr, "priority"))
    return PyInt_FromLong(candidate->priority);
  else if (!strcmp (attr, "stream_id"))
    return PyInt_FromLong(candidate->stream_id);
  else if (!strcmp (attr, "component_id"))
    return PyInt_FromLong(candidate->component_id);
  else if (!strcmp (attr, "username"))
    return PyString_FromString (CHECK_NULL(candidate->username));
  else if (!strcmp (attr, "password"))
    return PyString_FromString (CHECK_NULL(candidate->password));
  else if (!strcmp (attr, "type"))
    return pyg_enum_from_gtype(NICE_TYPE_CANDIDATE_TYPE, candidate->type);
  else if (!strcmp (attr, "transport"))
    return pyg_enum_from_gtype(NICE_TYPE_CANDIDATE_TRANSPORT, candidate->transport);
  else if (!strcmp (attr, "addr"))
  {
    char addr_string[INET6_ADDRSTRLEN];
	nice_address_to_string(&candidate->addr, addr_string);
	return Py_BuildValue("(si)", addr_string, nice_address_get_port(&candidate->addr));
  }
  else if (!strcmp (attr, "base_addr"))
  {
    char addr_string[INET6_ADDRSTRLEN];
	nice_address_to_string(&candidate->base_addr, addr_string);
	return Py_BuildValue("(si)", addr_string, nice_address_get_port(&candidate->base_addr));
  }
  // TODO: turn
  else
    return Py_FindMethod((PyMethodDef*)_PyNiceCandidate_methods, self, attr);

#undef CHECK_NULL
}
%%
override-slot NiceCandidate.tp_setattr
static int
_wrap_nice_candidate_tp_setattr(PyObject *self, char *attr, PyObject *value)
{
  NiceCandidate *candidate;

  candidate = pyg_boxed_get(self, NiceCandidate);

#define CHECK_SET_INT(var, min, max)                                    \
  do {                                                                  \
    if (!PyInt_Check(value) ||                                          \
        PyInt_AsLong(value) < (min) ||                                  \
        PyInt_AsLong(value) > (max))                                    \
    {                                                                   \
      PyErr_Format(PyExc_TypeError, "%s must be an int between %d and %d", \
          attr, min, max);                                              \
      return -1;                                                        \
    }                                                                   \
    candidate->var = PyInt_AsLong(value);                               \
  } while (0)
#define CHECK_SET_STR(var)                                              \
  do {                                                                  \
    if (value && !PyString_Check (value))                               \
    {                                                                   \
      PyErr_Format(PyExc_TypeError, "%s must be a string", attr);       \
      return -1;                                                        \
    }                                                                   \
    g_free ((gpointer*)candidate->var);                                 \
    if (value)                                                          \
      candidate->var = g_strdup (PyString_AsString (value));            \
    else                                                                \
      candidate->var = NULL;                                            \
  } while(0)



  if (!strcmp (attr, "foundation"))
  {
    if(value && !PyString_Check(value))
    {
      PyErr_Format(PyExc_TypeError, "%s must be a string", attr);
      return -1;
    }
    if(value)
    {
  	  if(strlen(PyString_AsString(value)) < sizeof(candidate->foundation)-1)
      {
        strcpy(candidate->foundation, PyString_AsString (value));
      }
      else
      {
        PyErr_Format(PyExc_TypeError, "%s must be a string of less than %lu characters",
          attr, sizeof(candidate->foundation));
      }
    }
    else
    {
      candidate->foundation[0] = '\0';
    }
  }
  else if (!strcmp (attr, "component_id"))
    CHECK_SET_INT (component_id, 1, 256);
  else if (!strcmp (attr, "priority"))
    CHECK_SET_INT (priority, G_MININT, G_MAXINT);
  else if (!strcmp (attr, "stream_id"))
    CHECK_SET_INT (stream_id, G_MININT, G_MAXINT);
  else if (!strcmp (attr, "component_id"))
    CHECK_SET_INT (component_id, G_MININT, G_MAXINT);
  else if (!strcmp (attr, "username"))
    CHECK_SET_STR (username);
  else if (!strcmp (attr, "password"))
    CHECK_SET_STR (password);
  else if (!strcmp (attr, "type"))
  {
    gint type;
    if (pyg_enum_get_value(NICE_TYPE_CANDIDATE_TYPE, value, &type))
      return -1;
    candidate->type = type;
  }
  else if (!strcmp (attr, "transport"))
  {
    gint transport;
    if (pyg_enum_get_value(NICE_TYPE_CANDIDATE_TRANSPORT, value, &transport))
      return -1;
    candidate->transport = transport;
  }
  else if (!strcmp (attr, "addr"))
  {
    char *addr = 0;
	int port;

	if(!PyArg_ParseTuple(value, "si", &addr, &port))
	{
   	  return -1;
	}
	if(!nice_address_set_from_string(&candidate->addr, addr))
	{
		PyErr_Format(PyExc_TypeError, "%s is not a valid ip address", addr);
		return -1;
	}
	nice_address_set_port(&candidate->addr, port);
  }
  else if (!strcmp (attr, "base_addr"))
  {
    char *addr = 0;
	int port;

	if(!PyArg_ParseTuple(value, "si", &addr, &port))
	{
   	  return -1;
	}
	if(!nice_address_set_from_string(&candidate->base_addr, addr))
	{
		PyErr_Format(PyExc_TypeError, "%s is not a valid ip address", addr);
		return -1;
	}
	nice_address_set_port(&candidate->base_addr, port);
  }
  // TODO: turn
  else
  {
    PyErr_Format(PyExc_AttributeError,
        "Attribute %s does not exist for NiceCandidate", attr);
    return -1;
  }

  return 0;
#undef CHECK_SET_INT
#undef CHECK_SET_STR
}
%%
override nice_agent_get_local_candidates
static PyObject *
_wrap_nice_agent_get_local_candidates(PyGObject *self, PyObject *args)
{
  guint stream_id, component_id;
  GSList *candidates, *item;
  NiceAgent* agent = (NiceAgent *)(self->obj);
  PyObject *result = NULL;

  if (!PyArg_ParseTuple(args, "II", &stream_id, &component_id))
  {
    return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  candidates = nice_agent_get_local_candidates(agent, stream_id, component_id);
  Py_END_ALLOW_THREADS

  result = PyList_New(0);
  for (item = candidates; item; item = g_slist_next (item))
  {
    NiceCandidate *candidate = item->data;
		PyList_Append(result, pyg_boxed_new(nice_candidate_get_type(), candidate, TRUE, TRUE));
  }

  return result;
}
%%
override nice_agent_get_remote_candidates
static PyObject *
_wrap_nice_agent_get_remote_candidates(PyGObject *self, PyObject *args)
{
  guint stream_id, component_id;
  GSList *candidates, *item;
  NiceAgent* agent = (NiceAgent *)(self->obj);
  PyObject *result = NULL;

  if (!PyArg_ParseTuple(args, "II", &stream_id, &component_id))
  {
    return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  candidates = nice_agent_get_remote_candidates(agent, stream_id, component_id);
  Py_END_ALLOW_THREADS

  result = PyList_New(0);
  for (item = candidates; item; item = g_slist_next (item))
  {
    NiceCandidate *candidate = item->data;
		PyList_Append(result, pyg_boxed_new(nice_candidate_get_type(), candidate, TRUE, TRUE));
  }

  return result;
}
%%
override nice_agent_set_remote_candidates
static PyObject *
_wrap_nice_agent_set_remote_candidates(PyGObject *self, PyObject *args)
{
  PyObject* list_obj;
  int num_candidates;
  guint stream_id, component_id;
  int added = -1;

  if (! PyArg_ParseTuple( args, "IIO!", &stream_id, &component_id, &PyList_Type, &list_obj))
    return NULL;

  num_candidates = PyList_Size(list_obj);
  if(num_candidates < 0)
  {
	PyErr_Format(PyExc_TypeError, "not a valid list of candidates");
    return NULL;
  }
  else
  {
    Py_ssize_t i;
	GSList *candidate_list = NULL;
	NiceAgent* agent = (NiceAgent *)(self->obj);

	// Check type of individual list items
	for(i = 0; i < num_candidates; i++)
	{
	  PyObject* candidate = PyList_GetItem(list_obj, i);

	  if (!pyg_boxed_check(candidate, nice_candidate_get_type()))
	  {
        PyErr_Format(PyExc_TypeError, "The parameter must be a Sequence of %s",
					 g_type_name (nice_candidate_get_type()));
		return NULL;
	  }
	}

	for(i = 0; i < num_candidates; i++)
	{
	  PyObject* candidate = PyList_GetItem(list_obj, i);

	  candidate_list = g_slist_append(candidate_list, nice_candidate_copy( (NiceCandidate *)pyg_boxed_get(candidate, NiceCandidate*)));
	}

	Py_BEGIN_ALLOW_THREADS
	added = nice_agent_set_remote_candidates(agent, stream_id, component_id, candidate_list);
	Py_END_ALLOW_THREADS
  }

  return PyBool_FromLong(added > 0);
}
%%
override nice_agent_add_local_address
static PyObject *
_wrap_nice_agent_add_local_address(PyGObject* self, PyObject *args)
{
    char *addr = 0;
	int port;
	gboolean result = FALSE;
	NiceAgent* agent = (NiceAgent *)(self->obj);

    if (! PyArg_ParseTuple( args, "(sI)", &addr, &port))
  	    return NULL;

	NiceAddress nice_addr;
	nice_address_set_from_string(&nice_addr, addr);
	nice_address_set_port(&nice_addr, port);

	Py_BEGIN_ALLOW_THREADS
	result = nice_agent_add_local_address(agent, &nice_addr);
	Py_END_ALLOW_THREADS

    return PyBool_FromLong(result);
}
%%
override nice_agent_get_local_credentials
static PyObject *
_wrap_nice_agent_get_local_credentials(PyGObject *self, PyObject *args)
{
	gchar *ufrag;
	gchar *pwd;
	NiceAgent* agent = (NiceAgent *)(self->obj);
	guint stream_id;
	PyObject *result;
	gboolean succeeded = FALSE;

    if (! PyArg_ParseTuple( args, "I", &stream_id))
  	    return NULL;

	Py_BEGIN_ALLOW_THREADS
	succeeded = nice_agent_get_local_credentials(agent, stream_id, &ufrag, &pwd);
	Py_END_ALLOW_THREADS

	if (! succeeded )
	{
		PyErr_SetString(PyExc_RuntimeError, "Failed to retrieve local credentials");
		return NULL;
	}

	result = Py_BuildValue("(ss)", ufrag, pwd);
	g_free(ufrag);
	g_free(pwd);

	return result;
}
